# .github/workflows/ci.yml

# The name of the workflow, which will be displayed on GitHub.
name: Python Application CI

# This workflow triggers on any 'push' to any branch or any 'pull_request'.
on: [push, pull_request]

jobs:
  # A single job in this workflow, named 'build-and-test'.
  build-and-test:
    # The type of runner that the job will run on. 'ubuntu-latest' is a good default.
    runs-on: ubuntu-latest
    
    # Define a matrix strategy to test against multiple Python versions.
    # This ensures your code is compatible across different environments.
    strategy:
      matrix:
        python-version: ["3.9", "3.10"]

    steps:
      # Step 1: Check out the repository code.
      # This action checks-out your repository under $GITHUB_WORKSPACE, so your job can access it.
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up the specified Python version from the matrix.
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      # Step 3: Install dependencies.
      # We cache dependencies to speed up subsequent builds.
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Install testing libraries first
          pip install pytest
          # Install dependencies from all modules.
          # The '-r' flag allows installing from a requirements file.
          if [ -f mlops/api/requirements.txt ]; then pip install -r mlops/api/requirements.txt; fi
          if [ -f data_analytics/requirements.txt ]; then pip install -r data_analytics/requirements.txt; fi
          if [ -f data_analytics/bridge/requirements.txt ]; then pip install -r data_analytics/bridge/requirements.txt; fi
      
      # Step 4: Run the tests with pytest.
      # The '-v' flag provides verbose output.
      - name: Run tests with pytest
        run: |
          pytest -v

